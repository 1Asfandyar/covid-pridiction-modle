# -*- coding: utf-8 -*-
"""Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/1Asfandyar/covid-pridiction-modle/blob/main/Project.ipynb
"""

#includeing libararies 

import pandas as pd
import glob
import numpy as np
import keras as k
import matplotlib.pyplot as plt
from keras.models import Sequential, load_model
from keras.layers import Dense
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, MinMaxScaler

#connecting google derive for saving and loading files
from google.colab import drive
drive.mount('/content/drive')

#importing csv file
DIRPATH = '/content/drive/MyDrive/Colab Notebooks/'
data_frame = pd.read_csv(DIRPATH + 'corona(1).csv')

data_frame.head

#get the shape of the data( no of rows and columns) here each column represents no.of people 
data_frame.shape

###---------------------------------------Data Cleaning and Arranging Section --------------------------------###
#rearranging the data
data_frame = data_frame[['age','Temperature','bpain','runnyNose','diffBreadth','infProb']]

#dropping columns with na values (if any)
data_fram=data_frame.dropna(axis=0)

#checking whether the data has any non numeric or neg data, if it has then we are using LabelEncoder to transform it to values
for column in data_frame.columns :
  if data_frame[column].dtype == np.number:
    continue
  else:
    data_frame[column]=LabelEncoder().fit_transform(data_frame[column])

#reviewing the data 
data_frame

#now splitting our data into dependent variable (that is our inference(last column)) and independent variable (syptoms and info)
# here X is our independent variable that is syptoms_and_info with all the columns except for the inference
#and Y contains the dependent data set that is actually the inferece or our target column
symptoms_and_info = data_frame.drop(['infProb'],axis=1) 
inference = data_frame['infProb']

#now we need to scale our input data so that it remain in between 0 and 1
scaling_input_x= MinMaxScaler()
scaling_input_x.fit(symptoms_and_info)
each_column = symptoms_and_info.columns
symptoms_and_info[each_column]=scaling_input_x.transform(symptoms_and_info)
symptoms_and_info

#---------------------Trainging and Testing the Model -----------------------------
training_symptoms_and_inf,testing_symptoms_and_info, training_inference, testing_inference =train_test_split(symptoms_and_info, inference, test_size = 0.2, shuffle= True)

model = Sequential()
model.add( Dense(256, input_dim=len(symptoms_and_info.columns) , kernel_initializer=k.initializers.random_normal(seed=13), activation='relu'))
model.add(Dense(1,activation='hard_sigmoid'))

model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

#training the model 
history = model.fit(training_symptoms_and_inf,training_inference,epochs=3000, batch_size=training_symptoms_and_inf.shape[0])

model.save('covid_pridiction.model')

predict = model.predict(testing_symptoms_and_info)
for probs in predict:
  print ('Probability of Infected by Covid-19 is: ',probs)